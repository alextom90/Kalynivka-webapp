from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)

TYPE, ISSUE, NAME, PHONE = range(4)
clients = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url="https://alextom90.github.io/kalynivka-webapp/new-request.html"))]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –º–∞–π—Å—Ç–µ—Ä–Ω—ñ –∑ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω—ñ–∫–∏.\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    await update.message.reply_text("‚û°Ô∏è –í–≤–µ–¥–∏ —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–º–∞—Ä—Ç—Ñ–æ–Ω):")
    return TYPE

async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = update.message.text
    await update.message.reply_text("üîß –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É:")
    return ISSUE

async def get_issue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["issue"] = update.message.text
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    order_id = f"ORD{len(clients)+1:03}"
    clients[order_id] = context.user_data.copy()
    await update.message.reply_text(f"‚úÖ –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ.\n–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}")
    return ConversationHandler.END

async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if code in clients:
        data = clients[code]
        await update.message.reply_text(
            f"üîé –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {code}:\n–¢–∏–ø: {data['type']}\n–ü—Ä–æ–±–ª–µ–º–∞: {data['issue']}\n–Ü–º‚Äô—è: {data['name']}"
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä –Ω–æ–º–µ—Ä.")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token("7715128894:AAFaA0ZGlroyEDkZAB13iEvpGhoIqk8mqk4").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
            ISSUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_issue)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[]
    )

    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_status))
    app.run_polling()
